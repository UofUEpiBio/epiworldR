% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/LFMCMC.R
\name{LFMCMC}
\alias{LFMCMC}
\alias{epiworld_lfmcmc}
\alias{run_lfmcmc}
\alias{set_observed_data}
\alias{set_proposal_fun}
\alias{use_proposal_norm_reflective}
\alias{set_simulation_fun}
\alias{set_summary_fun}
\alias{set_kernel_fun}
\alias{use_kernel_fun_gaussian}
\alias{set_params_names}
\alias{set_stats_names}
\alias{get_mean_params}
\alias{get_mean_stats}
\alias{print.epiworld_lfmcmc}
\alias{get_accepted_params}
\alias{get_accepted_stats}
\alias{get_sample_stats}
\alias{get_n_params}
\alias{get_n_stats}
\alias{get_n_samples}
\title{Likelihood-Free Markhov Chain Monte Carlo (LFMCMC)}
\usage{
LFMCMC(model = NULL)

run_lfmcmc(lfmcmc, params_init, n_samples, epsilon, seed = NULL)

set_observed_data(lfmcmc, observed_data)

set_proposal_fun(lfmcmc, fun)

use_proposal_norm_reflective(lfmcmc)

set_simulation_fun(lfmcmc, fun)

set_summary_fun(lfmcmc, fun)

set_kernel_fun(lfmcmc, fun)

use_kernel_fun_gaussian(lfmcmc)

set_params_names(lfmcmc, names)

set_stats_names(lfmcmc, names)

get_mean_params(lfmcmc)

get_mean_stats(lfmcmc)

\method{print}{epiworld_lfmcmc}(x, burnin = 0, ...)

get_accepted_params(lfmcmc)

get_accepted_stats(lfmcmc)

get_sample_stats(lfmcmc)

get_n_params(lfmcmc)

get_n_stats(lfmcmc)

get_n_samples(lfmcmc)
}
\arguments{
\item{model}{A model of class \link{epiworld_model} or \code{NULL} (see details).}

\item{lfmcmc}{LFMCMC model}

\item{params_init}{Initial model parameters, treated as double}

\item{n_samples}{Number of samples, treated as integer}

\item{epsilon}{Epsilon parameter, treated as double}

\item{seed}{Random engine seed}

\item{observed_data}{Observed data, treated as double.}

\item{fun}{A function (see details).}

\item{names}{Character vector of names.}

\item{x}{LFMCMC model to print}

\item{burnin}{Integer. Number of samples to discard as burnin before
computing the summary.}

\item{...}{Ignored}
}
\value{
The \code{LFMCMC} function returns a model of class \link{epiworld_lfmcmc}.

The simulated model of class \link{epiworld_lfmcmc}.

\itemize{
\item \code{use_kernel_fun_gaussian}: The LFMCMC model with kernel function set to
gaussian.
}

\itemize{
\item \code{set_params_names}: The lfmcmc model with the parameter names added.
}

\itemize{
\item \code{set_stats_names}: The lfmcmc model with the stats names added.
}

\itemize{
\item \code{get_mean_params}: The param means for the given lfmcmc model.
}

\itemize{
\item \code{get_mean_stats}: The stats means for the given lfmcmc model.
}

\itemize{
\item The function \code{get_accepted_params} returns a matrix of accepted
parameters for the given LFMCMC model. with the number of rows equal to the
number of samples and the number of columns equal to the number of
parameters.
}

\itemize{
\item The function \code{get_accepted_stats} returns a matrix of accepted statistics
for the given LFMCMC model. with the number of rows equal to the number of
samples and the number of columns equal to the number of statistics.
}

\itemize{
\item The function \code{get_sample_stats} returns a matrix of statistics
for the given LFMCMC model. with the number of rows equal to the number of
samples and the number of columns equal to the number of statistics.
}

\itemize{
\item The functions \code{get_n_params}, \code{get_n_stats}, and \code{get_n_samples}
return the number of parameters, statistics, and samples for the given
LFMCMC model, respectively.
}
}
\description{
Likelihood-Free Markhov Chain Monte Carlo (LFMCMC)
}
\details{
Performs a Likelihood-Free Markhov Chain Monte Carlo simulation. When
\code{model} is not \code{NULL}, the model uses the same random-number generator
engine as the model. Otherwise, when \code{model} is \code{NULL}, a new random-number
generator engine is created.

The functions passed to the LFMCMC object have different arguments depending
on the object:
\itemize{
\item \code{set_proposal_fun}: A vector of parameters and the model.
\item \code{set_simulation_fun}: A vector of parameters and the model.
\item \code{set_summary_fun}: A vector of simulated data and the model.
\item \code{set_kernel_fun}: A vector of simulated statistics, observed statistics,
epsilon, and the model.
}
}
\examples{
## Setup an SIR model to use in the simulation
model_seed <- 122
model_sir <- ModelSIR(name = "COVID-19", prevalence = .1,
  transmission_rate = .9, recovery_rate = .3)
agents_smallworld(
  model_sir,
  n = 1000,
  k = 5,
  d = FALSE,
  p = 0.01
)
verbose_off(model_sir)
run(model_sir, ndays = 50, seed = model_seed)

## Setup LFMCMC
# Extract the observed data from the model
obs_data <- get_today_total(model_sir)

# Define the simulation function
simfun <- function(params, lfmcmc_obj) {
  set_param(model_sir, "Recovery rate", params[1])
  set_param(model_sir, "Transmission rate", params[2])
  run(model_sir, ndays = 50)
  res <- get_today_total(model_sir)
  return(res)
}

# Define the summary function
sumfun <- function(dat, lfmcmc_obj) {
  return(dat)
}

# Create the LFMCMC model
lfmcmc_model <- LFMCMC(model_sir) |>
  set_simulation_fun(simfun) |>
  set_summary_fun(sumfun) |>
  use_proposal_norm_reflective() |>
  use_kernel_fun_gaussian() |>
  set_observed_data(obs_data)

## Run LFMCMC simulation
# Set initial parameters
par0 <- c(0.1, 0.5)
n_samp <- 2000
epsil <- 1.0

# Run the LFMCMC simulation
run_lfmcmc(
  lfmcmc = lfmcmc_model,
  params_init = par0,
  n_samples = n_samp,
  epsilon = epsil,
  seed = model_seed
)

# Print the results
set_stats_names(lfmcmc_model, get_states(model_sir))
set_params_names(lfmcmc_model, c("Immune recovery", "Infectiousness"))

print(lfmcmc_model)

get_mean_stats(lfmcmc_model)
get_mean_params(lfmcmc_model)

}
